name: main
on: [push, pull_request]
jobs:
  # skip ci if the last commit contains the appropriate tag
  skip-commit:
    name: Conditionally skip ci
    runs-on: ubuntu-latest
    steps:
      - if: "contains(github.event.head_commit.message, '[skip-ci]')
          || contains(github.event.head_commit.message, '[skip ci]')
          || contains(github.event.head_commit.message, '[ci-skip]')
          || contains(github.event.head_commit.message, '[ci skip]')"
        run: exit 78

  # verify that Cargo.lock passes audit
  cargo-audit:
    name: Run cargo audit
    needs: [skip-commit]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        submodules: true
    - name: Fetch latest release version of cargo-audit
      run: |
        mkdir -p .github/caching
        cargo search cargo-audit | grep '^cargo-audit' | awk '{gsub(/"/,"",$3); print $3}' > .github/caching/cargo-audit.lock
    - name: Cache cargo-audit/bin
      id: cache-cargo-audit
      uses: actions/cache@v1
      with:
        path: ${{ runner.tool_cache }}/cargo-audit/bin
        key: cargo-audit-bin-${{ hashFiles('.github/caching/cargo-audit.lock') }}
    - name: Install cargo-audit
      if: "steps.cache-cargo-audit.outputs.cache-hit != 'true'"
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: --root ${{ runner.tool_cache }}/cargo-audit --force cargo-audit
    - run: echo "::add-path::${{ runner.tool_cache }}/cargo-audit/bin"
    - run: cargo audit

  # verify that project builds
  cargo-check:
    name: Run cargo check
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
      RUST_TOOLCHAIN: 1.42.0
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN
      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features --all-targets --benches --bins --examples --tests --workspace

  # verify that project passes clippy lints
  cargo-clippy:
    name: Run cargo clippy
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: 1.42.0
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN --component clippy
      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets --benches --bins --examples --tests --workspace -- -D warnings

  # build the documentation
  cargo-docs:
    name: Run cargo docs
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: nightly
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN
      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          command: doc
          args: --all-features --no-deps --package wasm-language-server
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  # verify that code is formatted
  cargo-fmt:
    name: Run cargo fmt
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: nightly
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN --component rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          command: fmt
          args: --all -- --check

  # verify that tests pass
  cargo-test:
    name: Run cargo test
    needs: [skip-commit]
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN: 1.42.0
    steps:
      - uses: actions/checkout@master
        with:
          submodules: true
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install $RUST_TOOLCHAIN
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --all-targets --benches --bins --examples --tests --workspace
