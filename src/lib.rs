//! The WASM language server.

#![deny(clippy::all)]
#![deny(missing_docs)]
#![deny(unsafe_code)]

// Command-line interface for the WASM language server.
pub mod cli;
// Core functionality for the WASM language server.
mod core;
// Functionality related to implementation of the Language Server Protocol (LSP).
pub mod lsp;
// Definitions related to the wasm-language-server crate.
mod package;
// Services (components) of the WASM language server.
mod service;
// Various utility functionality, e.g., for handling lsp or tree-sitter data.
mod util;

use tree_sitter::Language;

// The external C-based parsers generated by wasm-lsp/tree-sitter-wasm.
extern {
    #[allow(dead_code)]
    #[doc(hidden)]
    fn tree_sitter_wast() -> Language;

    #[allow(dead_code)]
    #[doc(hidden)]
    fn tree_sitter_wat() -> Language;

    #[allow(dead_code)]
    #[doc(hidden)]
    fn tree_sitter_wit() -> Language;

    #[allow(dead_code)]
    #[doc(hidden)]
    fn tree_sitter_witx() -> Language;
}

#[cfg(feature = "test")]
#[doc(hidden)]
pub mod test {
    pub mod service {
        use serde_json::Value;
        use tower_lsp::{ExitedError, Incoming, LspService};
        use tower_test::mock::Spawn;

        pub async fn call(service: &mut Spawn<LspService>, request: &Incoming) -> Result<Option<Value>, ExitedError> {
            let response = service.call(request.clone()).await?;
            let response = response.and_then(|x| x.parse::<Value>().ok());
            Ok(response)
        }

        pub fn spawn() -> anyhow::Result<Spawn<LspService>> {
            let server = crate::lsp::server::Server::new()?;
            let (service, _messages) = LspService::new(server);
            Ok(Spawn::new(service))
        }
    }
}
